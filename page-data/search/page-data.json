{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"프로세스 현대 컴퓨팅 시스템에서 작업의 단위를 말한다. 프로그램이 메모리에 적재되어 실행중인 동적인 상태, 운영 체제로부터 시스템 자원을 할당받은 자원의 단위이다. 프로세스 제어 블록(PCB, Process Control Block) 프로세스에 연관된 모든 데이터를 가지는 저장소 역할을 한다.  프로세스의 생성 프로세스는 실행되는 동안 여러 개의 자식 프…","fields":{"slug":"/OS/"},"frontmatter":{"date":"August 22, 2023","title":"[OS] 프로세스 그리고 쓰레드","tags":["OS"]},"rawMarkdownBody":"\n프로세스\n------\n현대 컴퓨팅 시스템에서 작업의 단위를 말한다. 프로그램이 메모리에 적재되어 실행중인 동적인 상태, 운영 체제로부터 시스템 자원을 할당받은 자원의 단위이다.\n\n### 프로세스 제어 블록(PCB, Process Control Block)\n\n프로세스에 연관된 모든 데이터를 가지는 저장소 역할을 한다.\n\n![](Clipboard_2023-08-22-22-00-20.png)\n\n### 프로세스의 생성\n\n프로세스는 실행되는 동안 여러 개의 자식 프로세스를 생성할 수 있다. 생성된 프로세스들은 트리를 형성하며 각자의 pid를 가진다. 자식 프로세스는 부모 프로세스의 복사본으로 부모 프로세스와 똑같은 프로그램과 데이터를 가지며 각각 독립된 메모리 영역을 할당받는다.\n\n![](Clipboard_2023-07-26-10-53-48.png)\n\n### 멀티 프로세스\n\n각각 독립된 메모리를 할당받는다. 때문에 공유하는 메모리가 없기 때문에 프로세스를 전환하는 과정에 캐시 메모리가 초기화되고 데이터를 처음부터 불러와야하기 때문에 큰 비용이 발생하고(Overhead) 프로세스 간 통신을 위해서 통신 기법이 필요하다.\n\n### 프로세스간의 통신\n\n생성된 프로세스들은 각자 독립된 메모리 영역을 할당받기 때문에 데이터를 공유하기 위해선 프로세스 간 통신(IPC) 기법이 필요하다. 프로세스 통신에는 여러 가지 기법과 모델이 존재한다.\n\n\n- 공유 메모리(shared memory)\n- 메시지 전달(message passing)\n- 파이프\n- 소켓\n\n<br>\n\n쓰레드\n----\n\nCPU(프로세서) 이용의 기본 단위이다. 하나의 프로세스는 반드시 하나 이상의 스레드를 가진다. 프로세스가 다수의 스레드를 가진다면, 프로세스는 동시에 하나 이상의 작업을 수행할 수 있다\n\n### 멀티 스레드\n\n스레드는 같은 프로세스에 속한 다른 스레드와 스택을 제외한 코드, 데이터, 힙 영역을 공유한다. 공유 영역을 통한 통신이 가능하다. 하지만 동시에 같은 영역을 접근할 때 교착 상태가 생길 수 있는 문제점이 존재한다.  \n\n![](Clipboard_2023-07-26-10-53-27.png)\n<br>\n\n멀티 프로세스와 멀티 쓰레드\n---------------------\n![](Clipboard_2023-08-22-20-54-32.png)\n일반적으로 하나의 프로그램은 하나의 프로세스를 가지고 여러개의 쓰레드를 가진다(멀티 쓰레드 프로세스). 멀티 프로세스가 사용되지 않는 가장 큰 이유는 프로세스 전환 간의 *Context Switching* 때문인데, Context Switching이란 다른 프로세스로 전환되는 과정에서 현재 업무를 저장하고 다른 프로세스로 전환되는 과정이다. 종종 하나의 프로그램이 여러개의 프로세스를 가지는 경우도 있는데, 대표적인 예로 웹 브라우저가 있다. 웹 브라우저는 여러개의 탭 혹은 윈도우를 가질 수 있다. 이는 안정성과 보안의 이유가 있는데, 하나의 탭 혹은 윈도우가 크래시 났을 때 다른 모든 브라우저가 다운될 필요가 없기 때문이다.\n멀티 쓰레드는 Context Switching에 드는 비용이 상대적으로 적다. 쓰레드는 프로세스보다 가볍고, 스택을 제외한 데이터를 공유하기 때문에 Context Switching 과정에 저장하고 복구하는 절대적인 데이터 양이 적다.\n\n> Context Switching이란 현재 실행중인 프로세스를 다른 프로세스에게 CPU 제어권을 넘겨주는 과정, 현재 실행중인 프로세스의 정보 PCB에 저장하고 대기중인 프로세스의 정보를 PCB에서 CPU의 레지스터에 옮겨온다. 해당 과정에서 PCB는 공유하는 데이터가 없기 때문에 캐시에 저장되어있던 정보들은 초기화된다. 이때 발생하는 시간을 Dispatch latency라고 한다.\n\n## 참고\n\n* https://dmzld.tistory.com/18\n\n\n"}]}},"pageContext":{}},"staticQueryHashes":[]}